"""
Django settings for sj project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-!m=^@*pf)g7+jxx78+^1xw=@!#sn!jun8nvmt_z+zli8bov($q')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS","127.0.0.1").split(",")

# Environment variable for Django environment
GLOBAL_ENV = os.getenv("DJANGO_ENVIRONMENT", "Env Not Set")

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap',
    'fontawesome',
    'members.apps.MembersConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sj.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASE_NAME = os.getenv('DATABASE_NAME', 'database.sqlite3')
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'data' / DATABASE_NAME,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'de-ch'

TIME_ZONE = 'Europe/Zurich'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# -----------------------------------------------------------------------
# Custom settings for the project
# -----------------------------------------------------------------------

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

SESSION_COOKIE_SECURE = os.getenv('DJANGO_SESSION_COOKIE_SECURE', 'True')
CSRF_TRUSTED_ORIGINS = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS","http://127.0.0.1,http://localhost,https://[::1]").split(",")

# # Setup support for proxy headers
# USE_X_FORWARDED_HOST = True
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Main URL for the application (e.g., for email links)
MAIN_URL = os.getenv("MAIN_URL", default="http://localhost:8000")

# E-Mail Settings
SMTP_SERVER = os.getenv("EMAIL_SERVER", default="localhost")
SMTP_PORT = os.getenv("EMAIL_PORT", default=25)
SMTP_PASSWORD = os.getenv("EMAIL_PASSWORD", default="")

EMAIL_FROM_DISPLAY_NAME = os.getenv("EMAIL_FROM_DISPLAY_NAME", default="From Display Name")
EMAIL_FROM = os.getenv("EMAIL_FROM", default="foo@bar.com")

EMAIL_BCC_DISPLAY_NAME = os.getenv("EMAIL_BCC_DISPLAY_NAME", default="Bcc Display Name")
EMAIL_BCC = os.getenv("EMAIL_BCC", default="foo@bar.com")

# Email settings for sending emails (via django.core.mail)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development, use console backend to print emails to console
EMAIL_HOST = os.getenv("EMAIL_SERVER", default="localhost")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", default=25))
EMAIL_HOST_USER = os.getenv("EMAIL_USERNAME", default="")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWORD", default="")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", default="False") == "True"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", default="False") == "True"
DEFAULT_FROM_EMAIL = f'{EMAIL_FROM_DISPLAY_NAME} <{EMAIL_FROM}>'  # Default sender format
EMAIL_BCC = f'{EMAIL_BCC_DISPLAY_NAME} <{EMAIL_BCC}>'  # Default Bcc format

# Celery Settings
# Celery broker and result backend using Redis
CELERY_BROKER_URL = os.environ.get("BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("RESULT_BACKEND", "redis://localhost:6379/0")

# Printer Settings
PRINTER_RUN_IP = os.getenv("PRINTER_RUN_IP", default="192.168.0.10")
PRINTER_REG_IP = os.getenv("PRINTER_REG_IP", default="192.168.0.11")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': os.getenv("LOGGING_LEVEL", "INFO"),
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'data', 'app.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': False,
        },
        'sj.logger': {
            'handlers': [os.getenv("LOGGING_DESTINATION", "console")],
            'level': os.getenv("LOGGING_LEVEL", "INFO"),
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': os.getenv("LOGGING_LEVEL", "WARNING"),
    }
}
